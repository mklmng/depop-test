{"version":3,"sources":["components/products/Product.js","App.js","serviceWorker.js","index.js"],"names":["Product","this","props","id","img","title","brand","price","size","handleLike","liked","sold","className","onClick","src","alt","parseFloat","Component","App","updatedProducts","state","products","forEach","p","setState","toggleSold","showSold","loading","showLikes","length","axios","get","then","response","data","product","catch","error","likedItems","filter","filteredProducts","rel","href","integrity","crossOrigin","type","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.99ab5635.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nexport class Product extends Component {\r\n    static propTypes = {\r\n        id: PropTypes.number.isRequired,\r\n        img: PropTypes.string.isRequired,\r\n        title: PropTypes.string.isRequired,\r\n        price: PropTypes.number.isRequired,\r\n        size: PropTypes.string.isRequired,\r\n        handleLike: PropTypes.func.isRequired,\r\n        liked: PropTypes.bool.isRequired,\r\n        sold: PropTypes.bool.isRequired\r\n    }\r\n\r\n    render() {\r\n        const {id, img, title, brand, price, size, handleLike, liked, sold } = this.props;\r\n\r\n        return (\r\n        <div className=\"col-md-3\">\r\n            <div className=\"card mb-4 box-shadow\">\r\n                <div className={`image-wrapper ${sold && \"sold\"}`}>\r\n                    <div className={`like-button ${liked && \"liked\"}`} onClick={() => handleLike(id)}>\r\n                        <span>{`${liked ? 'Unlike' : 'Like'}`}</span>\r\n                    </div>\r\n                    <img className=\"card-img-top\" src={img} alt={title} />\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <p className=\"card-text\">{title}</p>\r\n                    <p className=\"card-text\">{brand && brand}</p>\r\n                    <p className=\"card-text\">{size}</p>\r\n                    <p className=\"card-text bold\">Â£{parseFloat(price)}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Product\r\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Product from './components/products/Product';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      products: [],\n      loading: false,\n      showLikes: false,\n      showSold: true\n    }\n}  \n\ncomponentDidMount() {\n  if (!this.state.products.length){\n    this.setState({ loading: true}, () => {\n      axios.get('https://5c78274f6810ec00148d0ff1.mockapi.io/api/v1/products')\n      .then(response => {\n        let updatedProducts = response.data;\n        updatedProducts.forEach(product => {\n          product.liked = false\n        }); \n        \n        this.setState({\n          loading: false,\n          products: updatedProducts\n        })\n      })\n      .catch(error => {\n        this.setState({ loading: false })\n      })\n    });\n  }\n}\n\nhandleLike = (id) => {\n  let updatedProducts = [...this.state.products];\n  updatedProducts.forEach((p) => {\n    if (p.id === id) {\n        p.liked = !p.liked;\n    }\n  });\n\n  this.setState({ products: updatedProducts})\n}\n\ntoggleSold = () => {\n  this.setState({ showSold: !this.state.showSold })\n}\n\nrender(){\n  let likedItems = this.state.products.filter(p => p.liked).length;\n  let filteredProducts = this.state.products;\n\n  if (!this.state.showSold){\n      filteredProducts = filteredProducts.filter(p => !p.sold);\n  }\n\n  return (\n    <div className=\"App\">\n    <link\n        rel=\"stylesheet\"\n        href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"\n        integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"\n        crossOrigin=\"anonymous\"\n    />\n\n      <div className=\"top-bar align-right\">\n        <button type=\"button\" className=\"btn btn-sm btn-outline-secondary\" >Liked {likedItems}</button>\n      </div>  \n      <div id=\"product-area\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col\">\n              <div id=\"results\">\n                <h2>{filteredProducts.length} results.</h2>\n              </div>\n            </div>\n            <div className=\"col align-center-right\">\n                <button \n                  type=\"button\" \n                  className=\"btn btn-sm btn-outline-secondary\"                 \n                  onClick={() => this.toggleSold()}\n                >\n                {this.state.showSold ? 'Hide Sold Items' : 'Show Sold Items'}  \n                </button>\n            </div>\n          </div>\n          <div className=\"row\">\n          {\n              filteredProducts.map((product, index) => {\n\n              return (\n                  <Product key={index}\n                    id={product.id}\n                    img={product.img}\n                    title={product.title}\n                    brand={product.brand}\n                    price={product.price}\n                    size={product.size}\n                    liked={product.liked}\n                    sold={product.sold}\n                    handleLike={this.handleLike}\n                  />\n              )\n            })\n          }\n          </div>\n        </div>\n      </div>\n    </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}